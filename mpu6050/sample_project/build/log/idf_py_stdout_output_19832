[1/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[2/9] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\work\PT01\code\git_pt01\ESP_IDF\examples\mpu6050\sample_project\build\bootloader\esp-idf\esptool_py && C:\Users\INNOTECH\.espressif\python_env\idf5.1_py3.10_env\Scripts\python.exe D:/work/PT01/code/git_pt01/ESP_IDF/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 D:/work/PT01/code/git_pt01/ESP_IDF/examples/mpu6050/sample_project/build/bootloader/bootloader.bin"
Bootloader binary size 0x51a0 bytes. 0x2e60 bytes (36%) free.
[3/7] Linking C static library esp-idf\main\libmain.a
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable main.elf
[6/7] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated D:/work/PT01/code/git_pt01/ESP_IDF/examples/mpu6050/sample_project/build/main.bin
[7/7] cmd.exe /C "cd /D D:\work\PT01\code\git_pt01\ESP_IDF\examples\mpu6050\sample_project\build\esp-idf\esptool_py && C:\Users\INNOTECH\.espressif\python_env\idf5.1_py3.10_env\Scripts\python.exe D:/work/PT01/code/git_pt01/ESP_IDF/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/work/PT01/code/git_pt01/ESP_IDF/examples/mpu6050/sample_project/build/partition_table/partition-table.bin D:/work/PT01/code/git_pt01/ESP_IDF/examples/mpu6050/sample_project/build/main.bin"
main.bin binary size 0x3e230 bytes. Smallest app partition is 0x2ee000 bytes. 0x2afdd0 bytes (92%) free.
